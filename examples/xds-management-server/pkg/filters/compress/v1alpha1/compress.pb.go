//
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: filters/compress/v1alpha1/compress.proto

package quilkin_extensions_filters_compress_v1alpha1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Compress_Mode int32

const (
	Compress_Snappy Compress_Mode = 0
)

// Enum value maps for Compress_Mode.
var (
	Compress_Mode_name = map[int32]string{
		0: "Snappy",
	}
	Compress_Mode_value = map[string]int32{
		"Snappy": 0,
	}
)

func (x Compress_Mode) Enum() *Compress_Mode {
	p := new(Compress_Mode)
	*p = x
	return p
}

func (x Compress_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compress_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_filters_compress_v1alpha1_compress_proto_enumTypes[0].Descriptor()
}

func (Compress_Mode) Type() protoreflect.EnumType {
	return &file_filters_compress_v1alpha1_compress_proto_enumTypes[0]
}

func (x Compress_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compress_Mode.Descriptor instead.
func (Compress_Mode) EnumDescriptor() ([]byte, []int) {
	return file_filters_compress_v1alpha1_compress_proto_rawDescGZIP(), []int{0, 0}
}

type Compress_Action int32

const (
	Compress_DoNothing  Compress_Action = 0
	Compress_Compress   Compress_Action = 1
	Compress_Decompress Compress_Action = 2
)

// Enum value maps for Compress_Action.
var (
	Compress_Action_name = map[int32]string{
		0: "DoNothing",
		1: "Compress",
		2: "Decompress",
	}
	Compress_Action_value = map[string]int32{
		"DoNothing":  0,
		"Compress":   1,
		"Decompress": 2,
	}
)

func (x Compress_Action) Enum() *Compress_Action {
	p := new(Compress_Action)
	*p = x
	return p
}

func (x Compress_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compress_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_filters_compress_v1alpha1_compress_proto_enumTypes[1].Descriptor()
}

func (Compress_Action) Type() protoreflect.EnumType {
	return &file_filters_compress_v1alpha1_compress_proto_enumTypes[1]
}

func (x Compress_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compress_Action.Descriptor instead.
func (Compress_Action) EnumDescriptor() ([]byte, []int) {
	return file_filters_compress_v1alpha1_compress_proto_rawDescGZIP(), []int{0, 1}
}

type Compress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    *Compress_ModeValue   `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	OnRead  *Compress_ActionValue `protobuf:"bytes,2,opt,name=on_read,json=onRead,proto3" json:"on_read,omitempty"`
	OnWrite *Compress_ActionValue `protobuf:"bytes,3,opt,name=on_write,json=onWrite,proto3" json:"on_write,omitempty"`
}

func (x *Compress) Reset() {
	*x = Compress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filters_compress_v1alpha1_compress_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compress) ProtoMessage() {}

func (x *Compress) ProtoReflect() protoreflect.Message {
	mi := &file_filters_compress_v1alpha1_compress_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compress.ProtoReflect.Descriptor instead.
func (*Compress) Descriptor() ([]byte, []int) {
	return file_filters_compress_v1alpha1_compress_proto_rawDescGZIP(), []int{0}
}

func (x *Compress) GetMode() *Compress_ModeValue {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Compress) GetOnRead() *Compress_ActionValue {
	if x != nil {
		return x.OnRead
	}
	return nil
}

func (x *Compress) GetOnWrite() *Compress_ActionValue {
	if x != nil {
		return x.OnWrite
	}
	return nil
}

type Compress_ModeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value Compress_Mode `protobuf:"varint,1,opt,name=value,proto3,enum=quilkin.extensions.filters.compress.v1alpha1.Compress_Mode" json:"value,omitempty"`
}

func (x *Compress_ModeValue) Reset() {
	*x = Compress_ModeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filters_compress_v1alpha1_compress_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compress_ModeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compress_ModeValue) ProtoMessage() {}

func (x *Compress_ModeValue) ProtoReflect() protoreflect.Message {
	mi := &file_filters_compress_v1alpha1_compress_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compress_ModeValue.ProtoReflect.Descriptor instead.
func (*Compress_ModeValue) Descriptor() ([]byte, []int) {
	return file_filters_compress_v1alpha1_compress_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Compress_ModeValue) GetValue() Compress_Mode {
	if x != nil {
		return x.Value
	}
	return Compress_Snappy
}

type Compress_ActionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value Compress_Action `protobuf:"varint,1,opt,name=value,proto3,enum=quilkin.extensions.filters.compress.v1alpha1.Compress_Action" json:"value,omitempty"`
}

func (x *Compress_ActionValue) Reset() {
	*x = Compress_ActionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filters_compress_v1alpha1_compress_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compress_ActionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compress_ActionValue) ProtoMessage() {}

func (x *Compress_ActionValue) ProtoReflect() protoreflect.Message {
	mi := &file_filters_compress_v1alpha1_compress_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compress_ActionValue.ProtoReflect.Descriptor instead.
func (*Compress_ActionValue) Descriptor() ([]byte, []int) {
	return file_filters_compress_v1alpha1_compress_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Compress_ActionValue) GetValue() Compress_Action {
	if x != nil {
		return x.Value
	}
	return Compress_DoNothing
}

var File_filters_compress_v1alpha1_compress_proto protoreflect.FileDescriptor

var file_filters_compress_v1alpha1_compress_proto_rawDesc = []byte{
	0x0a, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x71, 0x75, 0x69, 0x6c,
	0x6b, 0x69, 0x6e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0xab, 0x04, 0x0a, 0x08, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x71, 0x75, 0x69, 0x6c, 0x6b, 0x69, 0x6e, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x07, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x71,
	0x75, 0x69, 0x6c, 0x6b, 0x69, 0x6e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x6f, 0x6e, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x71, 0x75, 0x69,
	0x6c, 0x6b, 0x69, 0x6e, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x6f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x1a, 0x5e, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x71, 0x75, 0x69, 0x6c, 0x6b, 0x69, 0x6e, 0x2e, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x62, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x71, 0x75, 0x69, 0x6c, 0x6b, 0x69, 0x6e, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x12, 0x0a, 0x04, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6e, 0x61, 0x70, 0x70, 0x79, 0x10, 0x00, 0x22,
	0x35, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x6f, 0x4e,
	0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filters_compress_v1alpha1_compress_proto_rawDescOnce sync.Once
	file_filters_compress_v1alpha1_compress_proto_rawDescData = file_filters_compress_v1alpha1_compress_proto_rawDesc
)

func file_filters_compress_v1alpha1_compress_proto_rawDescGZIP() []byte {
	file_filters_compress_v1alpha1_compress_proto_rawDescOnce.Do(func() {
		file_filters_compress_v1alpha1_compress_proto_rawDescData = protoimpl.X.CompressGZIP(file_filters_compress_v1alpha1_compress_proto_rawDescData)
	})
	return file_filters_compress_v1alpha1_compress_proto_rawDescData
}

var file_filters_compress_v1alpha1_compress_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_filters_compress_v1alpha1_compress_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_filters_compress_v1alpha1_compress_proto_goTypes = []interface{}{
	(Compress_Mode)(0),           // 0: quilkin.extensions.filters.compress.v1alpha1.Compress.Mode
	(Compress_Action)(0),         // 1: quilkin.extensions.filters.compress.v1alpha1.Compress.Action
	(*Compress)(nil),             // 2: quilkin.extensions.filters.compress.v1alpha1.Compress
	(*Compress_ModeValue)(nil),   // 3: quilkin.extensions.filters.compress.v1alpha1.Compress.ModeValue
	(*Compress_ActionValue)(nil), // 4: quilkin.extensions.filters.compress.v1alpha1.Compress.ActionValue
}
var file_filters_compress_v1alpha1_compress_proto_depIdxs = []int32{
	3, // 0: quilkin.extensions.filters.compress.v1alpha1.Compress.mode:type_name -> quilkin.extensions.filters.compress.v1alpha1.Compress.ModeValue
	4, // 1: quilkin.extensions.filters.compress.v1alpha1.Compress.on_read:type_name -> quilkin.extensions.filters.compress.v1alpha1.Compress.ActionValue
	4, // 2: quilkin.extensions.filters.compress.v1alpha1.Compress.on_write:type_name -> quilkin.extensions.filters.compress.v1alpha1.Compress.ActionValue
	0, // 3: quilkin.extensions.filters.compress.v1alpha1.Compress.ModeValue.value:type_name -> quilkin.extensions.filters.compress.v1alpha1.Compress.Mode
	1, // 4: quilkin.extensions.filters.compress.v1alpha1.Compress.ActionValue.value:type_name -> quilkin.extensions.filters.compress.v1alpha1.Compress.Action
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_filters_compress_v1alpha1_compress_proto_init() }
func file_filters_compress_v1alpha1_compress_proto_init() {
	if File_filters_compress_v1alpha1_compress_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_filters_compress_v1alpha1_compress_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filters_compress_v1alpha1_compress_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compress_ModeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filters_compress_v1alpha1_compress_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compress_ActionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filters_compress_v1alpha1_compress_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_filters_compress_v1alpha1_compress_proto_goTypes,
		DependencyIndexes: file_filters_compress_v1alpha1_compress_proto_depIdxs,
		EnumInfos:         file_filters_compress_v1alpha1_compress_proto_enumTypes,
		MessageInfos:      file_filters_compress_v1alpha1_compress_proto_msgTypes,
	}.Build()
	File_filters_compress_v1alpha1_compress_proto = out.File
	file_filters_compress_v1alpha1_compress_proto_rawDesc = nil
	file_filters_compress_v1alpha1_compress_proto_goTypes = nil
	file_filters_compress_v1alpha1_compress_proto_depIdxs = nil
}
